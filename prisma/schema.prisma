// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  role         UserRoles
  password     String
  email        String       @unique
  verifiedUser Boolean
  studentId    String?
  facultyId    String?
  adminId      String?
  superAdminId String?
  students     Student[]
  faculties    Faculty[]
  admin        Admin[]
  SuperAdmin   SuperAdmin[]

  @@map("users")
}

model Student {
  id                  String                @id @default(uuid())
  studentId           String
  firstName           String
  lastName            String
  middleName          String?
  profileImage        String
  gender              String
  institution         String
  user                User                  @relation(fields: [userId], references: [id])
  userId              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  interests           InterestStudent[]
  faculties           FacultyEnrollment[]
  taskStudent         TaskStudent[]
  TaskFeedback        TaskFeedback[]
  SkillStudent        SkillStudent[]
  RelatedWorksStudent RelatedWorksStudent[]

  @@map("students")
}

model Faculty {
  id                  String                @id @default(uuid())
  facultyId           String
  firstName           String
  lastName            String
  middleName          String?
  institution         String
  contactNum          String
  profileImage        String
  gender              String
  user                User                  @relation(fields: [userId], references: [id])
  userId              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  InterestFaculty     InterestFaculty[]
  students            FacultyEnrollment[]
  taskFaculty         TaskFaculty[]
  Task                Task[]
  TaskFeedback        TaskFeedback[]
  RelatedWorksFaculty RelatedWorksFaculty[]

  @@map("faculties")
}

model Admin {
  id           String   @id @default(uuid())
  adminId      String
  firstName    String
  lastName     String
  middleName   String?
  profileImage String
  gender       String
  contactNum   String
  address      String
  activity     String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("admins")
}

model SuperAdmin {
  id           String   @id @default(uuid())
  superAdminId String
  firstName    String
  lastName     String
  middleName   String?
  profileImage String
  gender       String
  contactNum   String
  address      String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("super_admins")
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tokens")
}

model Interest {
  id                  String                @id @default(uuid())
  title               String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  students            InterestStudent[]
  faculties           InterestFaculty[]
  SkillStudent        SkillStudent[]
  RelatedWorksStudent RelatedWorksStudent[]
  RelatedWorksFaculty RelatedWorksFaculty[]

  @@map("interests")
}

model SkillStudent {
  interestId String
  interest   Interest    @relation(fields: [interestId], references: [id])
  status     SkillStatus
  studentId  String
  student    Student     @relation(fields: [studentId], references: [id])

  @@id([interestId, studentId])
  @@map("student_skills")
}

enum SkillStatus {
  Expert
  Proficient
  Competent
  Novice
  NotSet
}

model InterestStudent {
  interestId String
  interest   Interest @relation(fields: [interestId], references: [id])
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])

  @@id([interestId, studentId])
  @@map("student_interests")
}

model RelatedWorksStudent {
  interestId  String
  interest    Interest @relation(fields: [interestId], references: [id])
  description String
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])

  @@id([interestId, studentId])
  @@map("student_relatedWorks")
}

model InterestFaculty {
  interestId String
  interest   Interest @relation(fields: [interestId], references: [id])
  facultyId  String
  faculty    Faculty  @relation(fields: [facultyId], references: [id])

  @@id([interestId, facultyId])
  @@map("faculty_interests")
}

model RelatedWorksFaculty {
  interestId  String
  interest    Interest @relation(fields: [interestId], references: [id])
  description String
  facultyId   String
  faculty     Faculty  @relation(fields: [facultyId], references: [id])

  @@id([interestId, facultyId])
  @@map("faculty_relatedWorks")
}

enum UserRoles {
  student
  faculty
  admin
}

model FacultyEnrollment {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])
  facultyId String

  @@map("faculty_enrollment")
}

model Task {
  id           String         @id @default(uuid())
  title        String
  description  String
  solution     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  hint         TaskHint[]
  students     TaskStudent[]
  faculties    TaskFaculty[]
  faculty      Faculty        @relation(fields: [facultyId], references: [id])
  facultyId    String
  TaskFeedback TaskFeedback[]
}

model TaskHint {
  id          String @id @default(uuid())
  description String
  task        Task   @relation(fields: [taskId], references: [id])
  taskId      String

  @@map("task_hint")
}

model TaskStudent {
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id])
  solution  String?
  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@id([taskId, studentId])
  @@map("student_task")
}

model TaskFaculty {
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([taskId, facultyId])
  @@map("faculty_task")
}

model TaskFeedback {
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  comment   String?
  status    Status  @default(NotSet)

  @@id([taskId, facultyId, studentId])
  @@map("task_feedback")
}

enum Status {
  Correct
  Wrong
  PartiallyCorrect
  PartiallyWrong
  NotSet
}

model Job {
  id             String        @id @default(uuid())
  title          String
  jobLink        String
  desc           String
  status         JobStatus
  companyWebsite String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subFields      SubField[]    @relation("JobSubFields")
  JobSubField    JobSubField[]

  @@map("jobs")
}

enum JobStatus {
  Available
  NotAvailable
}

model Course {
  id             String           @id @default(uuid())
  title          String
  courseLink     String
  desc           String
  price          String
  status         CourseStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subFields      SubField[]       @relation("CourseSubFields")
  CourseSubField CourseSubField[]

  @@map("courses")
}

enum CourseStatus {
  Available
  NotAvailable
}

model SubField {
  id                  String                @id @default(uuid())
  title               String
  desc                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  courses             Course[]              @relation("CourseSubFields")
  CourseSubField      CourseSubField[]
  jobs                Job[]                 @relation("JobSubFields")
  JobSubField         JobSubField[]
  masterFields        MasterField[]         @relation("MasterFieldSubFields")
  MasterFieldSubField MasterFieldSubField[]

  @@map("sub_fields")
}

model CourseSubField {
  courseId   String
  subFieldId String
  course     Course   @relation(fields: [courseId], references: [id])
  subField   SubField @relation(fields: [subFieldId], references: [id])

  @@id([courseId, subFieldId])
  @@map("course_sub_fields")
}

model JobSubField {
  jobId      String
  subFieldId String
  job        Job      @relation(fields: [jobId], references: [id])
  subField   SubField @relation(fields: [subFieldId], references: [id])

  @@id([jobId, subFieldId])
  @@map("job_sub_fields")
}

model MasterField {
  id                  String                @id @default(uuid())
  title               String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  subFields           SubField[]            @relation("MasterFieldSubFields")
  MasterFieldSubField MasterFieldSubField[]

  @@map("master_fields")
}

model MasterFieldSubField {
  masterFieldId String
  subFieldId    String
  masterField   MasterField @relation(fields: [masterFieldId], references: [id], onDelete: Cascade)
  subField      SubField    @relation(fields: [subFieldId], references: [id], onDelete: Cascade)

  @@id([masterFieldId, subFieldId])
  @@map("master_field_sub_fields")
}
